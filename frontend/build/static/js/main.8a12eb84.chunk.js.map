{"version":3,"sources":["components/NavBar.js","components/ShowProduct.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","value","handleChange","evt","console","log","currentTarget","_evt$currentTarget$da","dataset","store","sale","_this","setState","props","onChange","this","react_default","a","createElement","AppBar_default","position","style","marginBottom","index_es","centered","label","data-store","data-sale","Component","ShowProduct","item","className","width","component","height","image","url","variant","name","price","defaultProps","API_URL","App","products","componentDidMount","_this$state","getProducts","concat","axios","get","then","response","data","catch","error","NavBar_NavBar","container","spacing","padding","map","p","idx","ShowProduct_ShowProduct","key","product_name","img_url","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a12eb84.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar' \r\nimport {Tabs, Tab } from '@material-ui/core'\r\n\r\n\r\nexport default class NavBar extends Component {\r\n    state = {\r\n        value: 0,\r\n    }   \r\n    \r\n    handleChange =(evt, value)=>{\r\n        console.log(evt.currentTarget)\r\n        const {dataset:{store, sale}} = evt.currentTarget\r\n        this.setState({value})\r\n        this.props.onChange({store, sale})\r\n    }\r\n\r\n\r\n  render() {\r\n      const {value} = this.state\r\n\r\n    return (\r\n      <AppBar position='static' style={{marginBottom:20}}>\r\n          <Tabs value={value} onChange={this.handleChange} centered>\r\n              <Tab label = 'CU 1+1' data-store='CU' data-sale='OPO'/>\r\n              <Tab label = 'CU 2+1' data-store='CU' data-sale='TPO'/>\r\n              <Tab label = 'CU 기타' data-store='CU' data-sale='OTR'/>\r\n              <Tab label = 'GS 1+1' data-store='GS' data-sale='OPO'/>\r\n              <Tab label = 'GS 2+1' data-store='GS' data-sale='TPO'/>\r\n              <Tab label = 'GS 기타' data-store='GS' data-sale='OTR'/>\r\n              <Tab label = 'Seven 1+1' data-store='SV' data-sale='OPO'/>\r\n              <Tab label = 'Seven 2+1' data-store='SV' data-sale='TPO'/>\r\n              <Tab label = 'Seven 기타' data-store='SV' data-sale='OTR'/>\r\n          </Tabs>\r\n      </AppBar>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card, CardMedia, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\n  \r\n\r\nexport default class ShowProduct extends Component {\r\n    static defaultProps = {\r\n        url:'http://gs25appimg.gsretail.com/imgsvr/item/GD_8993083938594_001.jpg',\r\n        price:0\r\n    }\r\n  render() {\r\n    return (\r\n      <Grid item>\r\n        <Card \r\n            className=\"card\" \r\n            style={{width:160}}\r\n        >\r\n            <CardMedia \r\n                component=\"img\"\r\n                className=\"media\"\r\n                height =\"140\"\r\n                image={this.props.url}              \r\n            />\r\n            <CardContent>\r\n                <Typography variant='subtitle2'>\r\n                    {this.props.name}\r\n                </Typography>\r\n                <Typography variant='body1'>\r\n                    가격 : {this.props.price}원\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar'\nimport ShowProduct from './components/ShowProduct';\nimport { Grid } from '@material-ui/core';\nimport axios from 'axios'\n\n//const API_URL = 'http://localhost:8000/api'\nconst API_URL = 'http://Redix8.pythonanywhere.com/api'\n\nclass App extends Component {\n  state={\n    store:'CU',\n    sale:'OPO',\n    products:[]\n  }\n\n  componentDidMount=()=>{\n    const {store, sale} = this.state\n    this.getProducts(store, sale)    \n  }\n\n  getProducts=(store, sale)=>{\n    const url = `${API_URL}/${store}/${sale}`\n    axios.get(url).then(response=> {\n      this.setState({products: response.data})\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  }\n\n  handleChange = (data) => {\n    const {store, sale} = data\n    this.setState({\n      store: store,\n      sale: sale      \n    })\n    this.getProducts(store, sale)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar onChange={this.handleChange}>\n\n        </NavBar>\n        <Grid container spacing={8} style={{padding:20}}>\n            {this.state.products.map((p,idx)=>(\n              <ShowProduct key={idx} name={p.product_name} price={p.price} url={p.img_url} />\n            ))}            \n        </Grid>       \n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}